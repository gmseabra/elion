--- dimorphite_dl.py	2019-10-02 15:59:55.264707500 -0400
+++ dimorphite_dl.py_orig	2019-09-30 13:13:15.716119200 -0400
@@ -22,7 +22,13 @@
 import os
 import argparse
 import sys
-from io import StringIO
+
+try:
+    # Python2
+    from StringIO import StringIO
+except ImportError:
+    # Python3
+    from io import StringIO
 
 # Always let the user know a help file is available.
 print("\nFor help, use: python dimorphite_dl.py --help")
@@ -53,18 +59,14 @@
              True. Otherwise, returns None.
     """
 
-    # parser = ArgParseFuncs.get_args()
-    # args = vars(parser.parse_args())
+    parser = ArgParseFuncs.get_args()
+    args = vars(parser.parse_args())
 
-    args = {}
     # Add in any parameters in params.
     if params is not None:
         for k, v in params.items():
             args[k] = v
-    else:
-        parser = ArgParseFuncs.get_args()
-        args = vars(parser.parse_args())
-    
+
     # If being run from the command line, print out all parameters.
     if __name__ == "__main__":
         print("\nPARAMETERS:\n")
@@ -288,31 +290,21 @@
         smiles_str = smiles_str.replace("N=N=N", "N=[N+]=N")
         smiles_str = smiles_str.replace("NN#N", "N=[N+]=N")
 
-
-        # ************************************************************
-        # GMS: The following does not work from within an iPython Kernel. 
-        #      Here's a possible alternative.
-        # *************************************************************
-        
-        if 'ipykernel' not in sys.modules:
-
-            # Now convert to a mol object. Note the trick that is necessary to
-            # capture RDKit error/warning messages. See
-            # https://stackoverflow.com/questions/24277488/in-python-how-to-capture-the-stdout-from-a-c-shared-library-to-a-variable
-            stderr_fileno = sys.stderr.fileno()
-            stderr_save = os.dup(stderr_fileno)
-            stderr_pipe = os.pipe()
-            os.dup2(stderr_pipe[1], stderr_fileno)
-            os.close(stderr_pipe[1])
-
-            mol = Chem.MolFromSmiles(smiles_str)
-
-            os.close(stderr_fileno)
-            os.close(stderr_pipe[0])
-            os.dup2(stderr_save, stderr_fileno)
-            os.close(stderr_save)
-        else:
-            mol = Chem.MolFromSmiles(smiles_str)
+        # Now convert to a mol object. Note the trick that is necessary to
+        # capture RDKit error/warning messages. See
+        # https://stackoverflow.com/questions/24277488/in-python-how-to-capture-the-stdout-from-a-c-shared-library-to-a-variable
+        stderr_fileno = sys.stderr.fileno()
+        stderr_save = os.dup(stderr_fileno)
+        stderr_pipe = os.pipe()
+        os.dup2(stderr_pipe[1], stderr_fileno)
+        os.close(stderr_pipe[1])
+
+        mol = Chem.MolFromSmiles(smiles_str)
+
+        os.close(stderr_fileno)
+        os.close(stderr_pipe[0])
+        os.dup2(stderr_save, stderr_fileno)
+        os.close(stderr_save)
 
         # Check that there are None type errors Chem.MolFromSmiles has
         # sanitize on which means if there is even a small error in the SMILES
@@ -547,14 +539,13 @@
 
         # If the user wants to see the target states, add those to the ends of
         # each line.
-        ## if self.args["label_states"]:
-        ##     states = '\t'.join([x[1] for x in sites])
-        ##     new_lines = [x + "\t" + tag + "\t" + states for x in new_smis]
-        ## else:
-        ##     new_lines = [x + "\t" + tag for x in new_smis]
- 
-        ## self.cur_prot_SMI = new_lines
-        self.cur_prot_SMI = new_smis
+        if self.args["label_states"]:
+            states = '\t'.join([x[1] for x in sites])
+            new_lines = [x + "\t" + tag + "\t" + states for x in new_smis]
+        else:
+            new_lines = [x + "\t" + tag for x in new_smis]
+
+        self.cur_prot_SMI = new_lines
 
         return self.next()
 
@@ -1073,7 +1064,7 @@
     :return: A list of properly protonated rdkit.Chem.rdchem.Mol objects.
     :rtype: list
     """
-    
+
     # Do a quick check to make sure the user input makes sense.
     for bad_arg in ["smiles", "smiles_file", "output_file", "test"]:
         if bad_arg in kwargs:
@@ -1087,7 +1078,7 @@
     # Set the return_as_list flag so main() will return the protonated smiles
     # as a list.
     kwargs["return_as_list"] = True
-        
+
     # Having reviewed the code, it will be very difficult to rewrite it so
     # that a list of Mol objects can be used directly. Intead, convert this
     # list of mols to smiles and pass that. Not efficient, but it will work.
@@ -1095,22 +1086,10 @@
     for m in mol_lst:
         props = m.GetPropsAsDict()
         kwargs["smiles"] = Chem.MolToSmiles(m, isomericSmiles=True)
-        
-        # ***************************************************
-        # GMS: This is needed to clean and set default values
-        #      when using run_with_mol_list
-        # ***************************************************
-        # Clean and normalize the args
-        kwargs = ArgParseFuncs.clean_args(kwargs)
-        # ***************************************************
-
-
         protonated_smiles_and_props.extend(
             [(s.split("\t")[0], props) for s in main(kwargs)]
         )
 
-
-
     # Now convert the list of protonated smiles strings back to RDKit Mol
     # objects. Also, add back in the properties from the original mol objects.
     mols = []
